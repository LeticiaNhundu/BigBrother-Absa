// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * BigBrother
 * Api for Big Brother bigbrother
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Emotions
 */
export interface Emotions {
    /**
     * 
     * @type {number}
     * @memberof Emotions
     */
    emotionId?: number;
    /**
     * 
     * @type {string}
     * @memberof Emotions
     */
    emotionName: string;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    personId?: number;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    abnumber: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    surname: string;
}
/**
 * 
 * @export
 * @interface PersonEmotions
 */
export interface PersonEmotions {
    /**
     * 
     * @type {number}
     * @memberof PersonEmotions
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonEmotions
     */
    emotionFk: number;
    /**
     * 
     * @type {number}
     * @memberof PersonEmotions
     */
    personFk: number;
    /**
     * 
     * @type {number}
     * @memberof PersonEmotions
     */
    percentage: number;
    /**
     * 
     * @type {string}
     * @memberof PersonEmotions
     */
    emotionDate: string;
}
/**
 * 
 * @export
 * @interface TeamPerson
 */
export interface TeamPerson {
    /**
     * 
     * @type {number}
     * @memberof TeamPerson
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamPerson
     */
    personFk: number;
    /**
     * 
     * @type {number}
     * @memberof TeamPerson
     */
    teamFk: number;
}
/**
 * 
 * @export
 * @interface Teams
 */
export interface Teams {
    /**
     * 
     * @type {number}
     * @memberof Teams
     */
    teamId?: number;
    /**
     * 
     * @type {string}
     * @memberof Teams
     */
    teamName: string;
}

/**
 * EmotionsApi - axios parameter creator
 * @export
 */
export const EmotionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} emotionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmotion(emotionId: number, options: any = {}): RequestArgs {
            // verify required parameter 'emotionId' is not null or undefined
            if (emotionId === null || emotionId === undefined) {
                throw new RequiredError('emotionId','Required parameter emotionId was null or undefined when calling deleteEmotion.');
            }
            const localVarPath = `/bigbrother/deleteEmotion/{emotionId}`
                .replace(`{${"emotionId"}}`, encodeURIComponent(String(emotionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmotions(options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/getEmotions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} emotionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmotion(emotionId: number, options: any = {}): RequestArgs {
            // verify required parameter 'emotionId' is not null or undefined
            if (emotionId === null || emotionId === undefined) {
                throw new RequiredError('emotionId','Required parameter emotionId was null or undefined when calling getEmotion.');
            }
            const localVarPath = `/bigbrother/getEmotions/{emotionId}`
                .replace(`{${"emotionId"}}`, encodeURIComponent(String(emotionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Emotions} [emotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEmotion(emotion?: Emotions, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/saveEmotions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Emotions" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(emotion !== undefined ? emotion : {}) : (emotion || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Emotions} [emotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmotion(emotion?: Emotions, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/updateEmotion`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Emotions" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(emotion !== undefined ? emotion : {}) : (emotion || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmotionsApi - functional programming interface
 * @export
 */
export const EmotionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} emotionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmotion(emotionId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Emotions>> {
            const localVarAxiosArgs = EmotionsApiAxiosParamCreator(configuration).deleteEmotion(emotionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmotions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Emotions>> {
            const localVarAxiosArgs = EmotionsApiAxiosParamCreator(configuration).getAllEmotions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} emotionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmotion(emotionId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Emotions> {
            const localVarAxiosArgs = EmotionsApiAxiosParamCreator(configuration).getEmotion(emotionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Emotions} [emotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEmotion(emotion?: Emotions, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Emotions>> {
            const localVarAxiosArgs = EmotionsApiAxiosParamCreator(configuration).saveEmotion(emotion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Emotions} [emotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmotion(emotion?: Emotions, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Emotions>> {
            const localVarAxiosArgs = EmotionsApiAxiosParamCreator(configuration).updateEmotion(emotion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EmotionsApi - factory interface
 * @export
 */
export const EmotionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} emotionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmotion(emotionId: number, options?: any) {
            return EmotionsApiFp(configuration).deleteEmotion(emotionId, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEmotions(options?: any) {
            return EmotionsApiFp(configuration).getAllEmotions(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} emotionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmotion(emotionId: number, options?: any) {
            return EmotionsApiFp(configuration).getEmotion(emotionId, options)(axios, basePath);
        },
        /**
         * 
         * @param {Emotions} [emotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEmotion(emotion?: Emotions, options?: any) {
            return EmotionsApiFp(configuration).saveEmotion(emotion, options)(axios, basePath);
        },
        /**
         * 
         * @param {Emotions} [emotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmotion(emotion?: Emotions, options?: any) {
            return EmotionsApiFp(configuration).updateEmotion(emotion, options)(axios, basePath);
        },
    };
};

/**
 * EmotionsApi - object-oriented interface
 * @export
 * @class EmotionsApi
 * @extends {BaseAPI}
 */
export class EmotionsApi extends BaseAPI {
    /**
     * 
     * @param {number} emotionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmotionsApi
     */
    public deleteEmotion(emotionId: number, options?: any) {
        return EmotionsApiFp(this.configuration).deleteEmotion(emotionId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmotionsApi
     */
    public getAllEmotions(options?: any) {
        return EmotionsApiFp(this.configuration).getAllEmotions(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} emotionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmotionsApi
     */
    public getEmotion(emotionId: number, options?: any) {
        return EmotionsApiFp(this.configuration).getEmotion(emotionId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {Emotions} [emotion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmotionsApi
     */
    public saveEmotion(emotion?: Emotions, options?: any) {
        return EmotionsApiFp(this.configuration).saveEmotion(emotion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {Emotions} [emotion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmotionsApi
     */
    public updateEmotion(emotion?: Emotions, options?: any) {
        return EmotionsApiFp(this.configuration).updateEmotion(emotion, options)(this.axios, this.basePath);
    }

}


/**
 * PersonApi - axios parameter creator
 * @export
 */
export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} abNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson(abNumber: string, options: any = {}): RequestArgs {
            // verify required parameter 'abNumber' is not null or undefined
            if (abNumber === null || abNumber === undefined) {
                throw new RequiredError('abNumber','Required parameter abNumber was null or undefined when calling deletePerson.');
            }
            const localVarPath = `/bigbrother/deletePerson/{abNumber}`
                .replace(`{${"abNumber"}}`, encodeURIComponent(String(abNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPeople(options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/getPerson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} abNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson(abNumber: string, options: any = {}): RequestArgs {
            // verify required parameter 'abNumber' is not null or undefined
            if (abNumber === null || abNumber === undefined) {
                throw new RequiredError('abNumber','Required parameter abNumber was null or undefined when calling getPerson.');
            }
            const localVarPath = `/bigbrother/getPersonByAbNumber/{abNumber}`
                .replace(`{${"abNumber"}}`, encodeURIComponent(String(abNumber)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonBy(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPersonBy.');
            }
            const localVarPath = `/bigbrother/getPersonById/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Person} [person] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePerson(person?: Person, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/savePerson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Person" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(person !== undefined ? person : {}) : (person || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Person} [person] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson(person?: Person, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/updatePerson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Person" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(person !== undefined ? person : {}) : (person || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonApi - functional programming interface
 * @export
 */
export const PersonApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} abNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson(abNumber: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Person>> {
            const localVarAxiosArgs = PersonApiAxiosParamCreator(configuration).deletePerson(abNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPeople(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Person>> {
            const localVarAxiosArgs = PersonApiAxiosParamCreator(configuration).getAllPeople(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} abNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson(abNumber: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person> {
            const localVarAxiosArgs = PersonApiAxiosParamCreator(configuration).getPerson(abNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonBy(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person> {
            const localVarAxiosArgs = PersonApiAxiosParamCreator(configuration).getPersonBy(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Person} [person] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePerson(person?: Person, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Person>> {
            const localVarAxiosArgs = PersonApiAxiosParamCreator(configuration).savePerson(person, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Person} [person] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson(person?: Person, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Person>> {
            const localVarAxiosArgs = PersonApiAxiosParamCreator(configuration).updatePerson(person, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PersonApi - factory interface
 * @export
 */
export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} abNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson(abNumber: string, options?: any) {
            return PersonApiFp(configuration).deletePerson(abNumber, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPeople(options?: any) {
            return PersonApiFp(configuration).getAllPeople(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} abNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson(abNumber: string, options?: any) {
            return PersonApiFp(configuration).getPerson(abNumber, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonBy(id: number, options?: any) {
            return PersonApiFp(configuration).getPersonBy(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {Person} [person] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savePerson(person?: Person, options?: any) {
            return PersonApiFp(configuration).savePerson(person, options)(axios, basePath);
        },
        /**
         * 
         * @param {Person} [person] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson(person?: Person, options?: any) {
            return PersonApiFp(configuration).updatePerson(person, options)(axios, basePath);
        },
    };
};

/**
 * PersonApi - object-oriented interface
 * @export
 * @class PersonApi
 * @extends {BaseAPI}
 */
export class PersonApi extends BaseAPI {
    /**
     * 
     * @param {string} abNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public deletePerson(abNumber: string, options?: any) {
        return PersonApiFp(this.configuration).deletePerson(abNumber, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public getAllPeople(options?: any) {
        return PersonApiFp(this.configuration).getAllPeople(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} abNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public getPerson(abNumber: string, options?: any) {
        return PersonApiFp(this.configuration).getPerson(abNumber, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public getPersonBy(id: number, options?: any) {
        return PersonApiFp(this.configuration).getPersonBy(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {Person} [person] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public savePerson(person?: Person, options?: any) {
        return PersonApiFp(this.configuration).savePerson(person, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {Person} [person] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public updatePerson(person?: Person, options?: any) {
        return PersonApiFp(this.configuration).updatePerson(person, options)(this.axios, this.basePath);
    }

}


/**
 * PersonEmotionApi - axios parameter creator
 * @export
 */
export const PersonEmotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPersonEmotionByDate(startDate?: Date, endDate?: Date, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/getPersonEmotionByDate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPersonEmotions(options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/getPersonEmotion`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {number} [emotionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPersonEmotion(personId?: number, emotionId?: number, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/getByPersonEmotions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }

            if (emotionId !== undefined) {
                localVarQueryParameter['emotionId'] = emotionId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonEmotionApi - functional programming interface
 * @export
 */
export const PersonEmotionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPersonEmotionByDate(startDate?: Date, endDate?: Date, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonEmotions>> {
            const localVarAxiosArgs = PersonEmotionApiAxiosParamCreator(configuration).getAllPersonEmotionByDate(startDate, endDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPersonEmotions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonEmotions>> {
            const localVarAxiosArgs = PersonEmotionApiAxiosParamCreator(configuration).getAllPersonEmotions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {number} [emotionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPersonEmotion(personId?: number, emotionId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonEmotions> {
            const localVarAxiosArgs = PersonEmotionApiAxiosParamCreator(configuration).getByPersonEmotion(personId, emotionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PersonEmotionApi - factory interface
 * @export
 */
export const PersonEmotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {Date} [startDate] 
         * @param {Date} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPersonEmotionByDate(startDate?: Date, endDate?: Date, options?: any) {
            return PersonEmotionApiFp(configuration).getAllPersonEmotionByDate(startDate, endDate, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPersonEmotions(options?: any) {
            return PersonEmotionApiFp(configuration).getAllPersonEmotions(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {number} [emotionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPersonEmotion(personId?: number, emotionId?: number, options?: any) {
            return PersonEmotionApiFp(configuration).getByPersonEmotion(personId, emotionId, options)(axios, basePath);
        },
    };
};

/**
 * PersonEmotionApi - object-oriented interface
 * @export
 * @class PersonEmotionApi
 * @extends {BaseAPI}
 */
export class PersonEmotionApi extends BaseAPI {
    /**
     * 
     * @param {Date} [startDate] 
     * @param {Date} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonEmotionApi
     */
    public getAllPersonEmotionByDate(startDate?: Date, endDate?: Date, options?: any) {
        return PersonEmotionApiFp(this.configuration).getAllPersonEmotionByDate(startDate, endDate, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonEmotionApi
     */
    public getAllPersonEmotions(options?: any) {
        return PersonEmotionApiFp(this.configuration).getAllPersonEmotions(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [personId] 
     * @param {number} [emotionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonEmotionApi
     */
    public getByPersonEmotion(personId?: number, emotionId?: number, options?: any) {
        return PersonEmotionApiFp(this.configuration).getByPersonEmotion(personId, emotionId, options)(this.axios, this.basePath);
    }

}


/**
 * TeamPersonApi - axios parameter creator
 * @export
 */
export const TeamPersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [teamId] 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(teamId?: number, personId?: number, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/deleteTeamPerson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teamId !== undefined) {
                localVarQueryParameter['teamId'] = teamId;
            }

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeamPerson(options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/getAllTeamPerson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPerson(personId?: number, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/getTeamPersonByPerson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (personId !== undefined) {
                localVarQueryParameter['personId'] = personId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTeam(teamId?: number, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/getTeamPersonByTeam`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teamId !== undefined) {
                localVarQueryParameter['teamId'] = teamId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TeamPerson} [teamPerson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insert(teamPerson?: TeamPerson, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/saveTeamPerson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"TeamPerson" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamPerson !== undefined ? teamPerson : {}) : (teamPerson || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TeamPerson} [teamPerson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(teamPerson?: TeamPerson, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/updateTeamPerson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"TeamPerson" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(teamPerson !== undefined ? teamPerson : {}) : (teamPerson || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamPersonApi - functional programming interface
 * @export
 */
export const TeamPersonApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [teamId] 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(teamId?: number, personId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamPerson>> {
            const localVarAxiosArgs = TeamPersonApiAxiosParamCreator(configuration)._delete(teamId, personId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeamPerson(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamPerson>> {
            const localVarAxiosArgs = TeamPersonApiAxiosParamCreator(configuration).getAllTeamPerson(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPerson(personId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamPerson>> {
            const localVarAxiosArgs = TeamPersonApiAxiosParamCreator(configuration).getByPerson(personId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTeam(teamId?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamPerson>> {
            const localVarAxiosArgs = TeamPersonApiAxiosParamCreator(configuration).getByTeam(teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TeamPerson} [teamPerson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insert(teamPerson?: TeamPerson, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamPerson>> {
            const localVarAxiosArgs = TeamPersonApiAxiosParamCreator(configuration).insert(teamPerson, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TeamPerson} [teamPerson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(teamPerson?: TeamPerson, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamPerson>> {
            const localVarAxiosArgs = TeamPersonApiAxiosParamCreator(configuration).update(teamPerson, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamPersonApi - factory interface
 * @export
 */
export const TeamPersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} [teamId] 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(teamId?: number, personId?: number, options?: any) {
            return TeamPersonApiFp(configuration)._delete(teamId, personId, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeamPerson(options?: any) {
            return TeamPersonApiFp(configuration).getAllTeamPerson(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [personId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPerson(personId?: number, options?: any) {
            return TeamPersonApiFp(configuration).getByPerson(personId, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTeam(teamId?: number, options?: any) {
            return TeamPersonApiFp(configuration).getByTeam(teamId, options)(axios, basePath);
        },
        /**
         * 
         * @param {TeamPerson} [teamPerson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insert(teamPerson?: TeamPerson, options?: any) {
            return TeamPersonApiFp(configuration).insert(teamPerson, options)(axios, basePath);
        },
        /**
         * 
         * @param {TeamPerson} [teamPerson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(teamPerson?: TeamPerson, options?: any) {
            return TeamPersonApiFp(configuration).update(teamPerson, options)(axios, basePath);
        },
    };
};

/**
 * TeamPersonApi - object-oriented interface
 * @export
 * @class TeamPersonApi
 * @extends {BaseAPI}
 */
export class TeamPersonApi extends BaseAPI {
    /**
     * 
     * @param {number} [teamId] 
     * @param {number} [personId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamPersonApi
     */
    public _delete(teamId?: number, personId?: number, options?: any) {
        return TeamPersonApiFp(this.configuration)._delete(teamId, personId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamPersonApi
     */
    public getAllTeamPerson(options?: any) {
        return TeamPersonApiFp(this.configuration).getAllTeamPerson(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [personId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamPersonApi
     */
    public getByPerson(personId?: number, options?: any) {
        return TeamPersonApiFp(this.configuration).getByPerson(personId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [teamId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamPersonApi
     */
    public getByTeam(teamId?: number, options?: any) {
        return TeamPersonApiFp(this.configuration).getByTeam(teamId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TeamPerson} [teamPerson] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamPersonApi
     */
    public insert(teamPerson?: TeamPerson, options?: any) {
        return TeamPersonApiFp(this.configuration).insert(teamPerson, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TeamPerson} [teamPerson] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamPersonApi
     */
    public update(teamPerson?: TeamPerson, options?: any) {
        return TeamPersonApiFp(this.configuration).update(teamPerson, options)(this.axios, this.basePath);
    }

}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTeam.');
            }
            const localVarPath = `/bigbrother/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams(options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamById(id?: number, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/teamsById`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [teamName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByName(teamName?: string, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/teamsByName`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teamName !== undefined) {
                localVarQueryParameter['teamName'] = teamName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Teams} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTeam(team?: Teams, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Teams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(team !== undefined ? team : {}) : (team || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Teams} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(team?: Teams, options: any = {}): RequestArgs {
            const localVarPath = `/bigbrother/teams`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Teams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(team !== undefined ? team : {}) : (team || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teams>> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).deleteTeam(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teams>> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).getAllTeams(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamById(id?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teams> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).getTeamById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [teamName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByName(teamName?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teams> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).getTeamByName(teamName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Teams} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTeam(team?: Teams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teams>> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).saveTeam(team, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {Teams} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(team?: Teams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Teams>> {
            const localVarAxiosArgs = TeamsApiAxiosParamCreator(configuration).updateTeam(team, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(id: number, options?: any) {
            return TeamsApiFp(configuration).deleteTeam(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTeams(options?: any) {
            return TeamsApiFp(configuration).getAllTeams(options)(axios, basePath);
        },
        /**
         * 
         * @param {number} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamById(id?: number, options?: any) {
            return TeamsApiFp(configuration).getTeamById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [teamName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamByName(teamName?: string, options?: any) {
            return TeamsApiFp(configuration).getTeamByName(teamName, options)(axios, basePath);
        },
        /**
         * 
         * @param {Teams} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTeam(team?: Teams, options?: any) {
            return TeamsApiFp(configuration).saveTeam(team, options)(axios, basePath);
        },
        /**
         * 
         * @param {Teams} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(team?: Teams, options?: any) {
            return TeamsApiFp(configuration).updateTeam(team, options)(axios, basePath);
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteTeam(id: number, options?: any) {
        return TeamsApiFp(this.configuration).deleteTeam(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getAllTeams(options?: any) {
        return TeamsApiFp(this.configuration).getAllTeams(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamById(id?: number, options?: any) {
        return TeamsApiFp(this.configuration).getTeamById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [teamName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamByName(teamName?: string, options?: any) {
        return TeamsApiFp(this.configuration).getTeamByName(teamName, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {Teams} [team] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public saveTeam(team?: Teams, options?: any) {
        return TeamsApiFp(this.configuration).saveTeam(team, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {Teams} [team] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateTeam(team?: Teams, options?: any) {
        return TeamsApiFp(this.configuration).updateTeam(team, options)(this.axios, this.basePath);
    }

}


/**
 * VideoApi - axios parameter creator
 * @export
 */
export const VideoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecognition(files?: any, options: any = {}): RequestArgs {
            const localVarPath = `/api/Video/Recognition`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (files !== undefined) { 
                localVarFormParams.append('files', files as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [abNumber] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTraining(abNumber?: string, file?: any, options: any = {}): RequestArgs {
            const localVarPath = `/api/Video/Training`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (abNumber !== undefined) {
                localVarQueryParameter['abNumber'] = abNumber;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideoApi - functional programming interface
 * @export
 */
export const VideoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecognition(files?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = VideoApiAxiosParamCreator(configuration).postRecognition(files, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [abNumber] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTraining(abNumber?: string, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = VideoApiAxiosParamCreator(configuration).postTraining(abNumber, file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VideoApi - factory interface
 * @export
 */
export const VideoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {any} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecognition(files?: any, options?: any) {
            return VideoApiFp(configuration).postRecognition(files, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [abNumber] 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTraining(abNumber?: string, file?: any, options?: any) {
            return VideoApiFp(configuration).postTraining(abNumber, file, options)(axios, basePath);
        },
    };
};

/**
 * VideoApi - object-oriented interface
 * @export
 * @class VideoApi
 * @extends {BaseAPI}
 */
export class VideoApi extends BaseAPI {
    /**
     * 
     * @param {any} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public postRecognition(files?: any, options?: any) {
        return VideoApiFp(this.configuration).postRecognition(files, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [abNumber] 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideoApi
     */
    public postTraining(abNumber?: string, file?: any, options?: any) {
        return VideoApiFp(this.configuration).postTraining(abNumber, file, options)(this.axios, this.basePath);
    }

}


